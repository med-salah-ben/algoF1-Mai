PROCEDURE dot_product(v1,v2  : ARRAY_OF INTEGER , VAR dot : INTEGER)
VAR
    i : INTEGER
BEGIN
    dot := 0 ;
    i := 0 ;
    IF (v1.length <> v2.length) THEN
        Write("vectors with diffrent sizes we cannot calculat dot product")
        dot := NAN ; 
    END_IF
    WHILE (i< v1.length) DO
        dot := dot + v1[i]*v2[i]
    END_WHILE
END

ALGORITHM orthogonal_vectors
VAR
    v1 ,v2 : array_name : ARRAY_OF INTEGER;
    dot : INTEGER;
BEGIN
    //read size of elements o v1
    n1 := read_size();
    //read elements of v1
    read_array(n1,v1);
     //read size of elements o v2
    n2 := read_size();
    //read elements of v2
    read_array(n2,v2);
    dot_product(v1,v2,dot)
    IF (dot = 0) THEN
        write("V1 and V2 are orthogonal")
    ELSE 
        write("v1 and v2 are not orthogonal")
    END_IF
END

// func  

FUNCTION dot_product(v1,v2 :ARRAY_OF INTEGER) : INTEGER
VAR
    i , dot : INTEGER
BEGIN
    dot :=0;
    i :=0;
    IF (v1.length <> v2.length) THEN
         Write("vectors with diffrent sizes we cannot calculat dot product")
        RETURN NAN ; 
    END_IF
      WHILE (i< v1.length) DO
        dot := dot + v1[i]*v2[i]
    END_WHILE
    RETURN dot ;
END

ALGORITHM orthogonal_vectors
VAR
    v1 ,v2 : array_name : ARRAY_OF INTEGER;
    dot : INTEGER;
BEGIN
    //read size of elements o v1
    n1 := read_size();
    //read elements of v1
    read_array(n1,v1);
     //read size of elements o v2
    n2 := read_size();
    //read elements of v2
    read_array(n2,v2);
    dot := dot_product(v1,v2)
    IF (dot = 0) THEN
        write("V1 and V2 are orthogonal")
    ELSE 
        write("v1 and v2 are not orthogonal")
    END_IF
END